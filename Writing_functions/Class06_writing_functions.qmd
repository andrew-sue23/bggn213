---
title: "Writing_Functions_Class06"
format: markdown_github
author: "Andrew Sue PID: A13006809"
date: 01/26/24
---

## Writing Functions

Each function in R is defined by 3 things: 

- A user selected *name*
- Comma separated *input of arguments* (none,one or more)
- A *function body* including an optional output *return value*

Setting a value within the function calls it as its default if an arguent is not given otherwise. Example: `function(x,y=1)`

A function to add two numbers
```{r sillyfun}
sillyadd<-function(x,y=1){
  x + y
}
```
Let's call function 
```{r}
sillyadd(3)
```
To learn what a function does or how it is structured, you can remove the () of the function and input it within the console to see the full structure. 

You can also label chunks of code by typing a label name or identifier in the chunk as shown: {r *name*}.

#Lets do something more useful.

Write a function **grade()** to determine an overall grade from a vector of student homework assignment scores dropping the lowest single assignment score. 

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
gradebook <- data.frame(student1,student2,student3)
```
Start small when building function to then progress and modify it. 
```{r}
mean(student1)
```
```{r}
min(student1)
which.min(student1)
```
Now that we've identified the minimum row/grade, now we want to exclude it. 
```{r}
student1[-8]
```
Now combine all the code to give you the value of what you want. Now the NA in the other student grades become a problem with mean() so how do we remove them? 
```{r}
x <- student2 #can change this anytime
ind <- which.min(x) #finds lowest value, 
mean(x[-ind],na.rm = T) #excludes, and then takes mean
```
This doesnt work for student3 given the amount of NAs.
```{r}
x <- student3 #can change this anytime
mean(x[-which.min(x)],na.rm = T) #This put all together 
```
 So how do we find and replace the NAs with another value? 
```{r}
x <- student3 #can change this anytime
x[is.na(x)]<- 0
mean(x[-which.min(x)]) #This put all together 
```
```{r}
grade <- function(x){
  x[is.na(x)] <-0
  mean(x[-which.min(x)])
}
grade(student1)
```
Read a class gradebook CSV file
```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1) 
#row.names takes the first column and sets it as the row names
head(gradebook)
```

Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

R is vectorized, so unlike having to make loops to go through a dataframe and apply your function, we can just use the `apply()` function. 

Apply function requires 3 arguments:  

- x (your array or dataframe)  
- how the function is applied by either row or column (1 or 2)  
- the function that is going to be applied
```{r}
results<- apply(gradebook,1,grade)
results
```
Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]
```{r}
which.max(results)
```
Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? [2pts]

```{r}
apply(gradebook, 2, mean, na.rm = T)
```
Q4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]
```{r}
mask <- gradebook
mask[is.na(mask)]<-0
apply(mask,2, cor,results)
```


